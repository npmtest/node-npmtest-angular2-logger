{"/home/travis/build/npmtest/node-npmtest-angular2-logger/test.js":"/* istanbul instrument in package npmtest_angular2_logger */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-angular2-logger/lib.npmtest_angular2_logger.js":"/* istanbul instrument in package npmtest_angular2_logger */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_angular2_logger = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_angular2_logger = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-angular2-logger/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-angular2-logger && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_angular2_logger */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_angular2_logger\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_angular2_logger.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_angular2_logger.rollup.js'] =\n            local.assetsDict['/assets.npmtest_angular2_logger.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_angular2_logger.__dirname +\n                    '/lib.npmtest_angular2_logger.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-angular2-logger/node_modules/angular2-logger/core.js":"\"use strict\";\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n__export(require(\"./app/core/level\"));\r\n__export(require(\"./app/core/logger\"));\r\n__export(require(\"./app/core/providers\"));\r\n//# sourceMappingURL=core.js.map","/home/travis/build/npmtest/node-npmtest-angular2-logger/node_modules/angular2-logger/app/core/level.js":"\"use strict\";\r\n(function (Level) {\r\n    Level[Level[\"OFF\"] = 0] = \"OFF\";\r\n    Level[Level[\"ERROR\"] = 1] = \"ERROR\";\r\n    Level[Level[\"WARN\"] = 2] = \"WARN\";\r\n    Level[Level[\"INFO\"] = 3] = \"INFO\";\r\n    Level[Level[\"DEBUG\"] = 4] = \"DEBUG\";\r\n    Level[Level[\"LOG\"] = 5] = \"LOG\";\r\n})(exports.Level || (exports.Level = {}));\r\nvar Level = exports.Level;\r\n//# sourceMappingURL=level.js.map","/home/travis/build/npmtest/node-npmtest-angular2-logger/node_modules/angular2-logger/app/core/logger.js":"\"use strict\";\r\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n};\r\nvar core_1 = require(\"@angular/core\");\r\nvar level_1 = require(\"./level\");\r\nvar Options = (function () {\r\n    function Options() {\r\n    }\r\n    return Options;\r\n}());\r\nexports.Options = Options;\r\nvar CONSOLE_DEBUG_METHOD = console[\"debug\"] ? \"debug\" : \"log\";\r\nvar DEFAULT_OPTIONS = {\r\n    level: level_1.Level.WARN,\r\n    global: true,\r\n    globalAs: \"logger\",\r\n    store: false,\r\n    storeAs: \"angular2.logger.level\"\r\n};\r\nvar Logger = (function () {\r\n    function Logger(options) {\r\n        var _this = this;\r\n        this.Level = level_1.Level;\r\n        this._loadLevel = function () { return Number(localStorage.getItem(_this._storeAs)); };\r\n        this.global = function () { return window[_this._globalAs] = _this; };\r\n        this.isErrorEnabled = function () { return _this.level >= level_1.Level.ERROR; };\r\n        this.isWarnEnabled = function () { return _this.level >= level_1.Level.WARN; };\r\n        this.isInfoEnabled = function () { return _this.level >= level_1.Level.INFO; };\r\n        this.isDebugEnabled = function () { return _this.level >= level_1.Level.DEBUG; };\r\n        this.isLogEnabled = function () { return _this.level >= level_1.Level.LOG; };\r\n        var _a = Object.assign({}, DEFAULT_OPTIONS, options), level = _a.level, global = _a.global, globalAs = _a.globalAs, store = _a.store, storeAs = _a.storeAs;\r\n        this._level = level;\r\n        this._globalAs = globalAs;\r\n        this._storeAs = storeAs;\r\n        global && this.global();\r\n        if (store || this._loadLevel())\r\n            this.store();\r\n    }\r\n    Logger.prototype._storeLevel = function (level) { localStorage[this._storeAs] = level; };\r\n    Logger.prototype.error = function (message) {\r\n        var optionalParams = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            optionalParams[_i - 1] = arguments[_i];\r\n        }\r\n        this.isErrorEnabled() && console.error.apply(console, arguments);\r\n    };\r\n    Logger.prototype.warn = function (message) {\r\n        var optionalParams = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            optionalParams[_i - 1] = arguments[_i];\r\n        }\r\n        this.isWarnEnabled() && console.warn.apply(console, arguments);\r\n    };\r\n    Logger.prototype.info = function (message) {\r\n        var optionalParams = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            optionalParams[_i - 1] = arguments[_i];\r\n        }\r\n        this.isInfoEnabled() && console.info.apply(console, arguments);\r\n    };\r\n    Logger.prototype.debug = function (message) {\r\n        var optionalParams = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            optionalParams[_i - 1] = arguments[_i];\r\n        }\r\n        this.isDebugEnabled() && console[CONSOLE_DEBUG_METHOD].apply(console, arguments);\r\n    };\r\n    Logger.prototype.log = function (message) {\r\n        var optionalParams = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            optionalParams[_i - 1] = arguments[_i];\r\n        }\r\n        this.isLogEnabled() && console.log.apply(console, arguments);\r\n    };\r\n    Logger.prototype.store = function () {\r\n        this._store = true;\r\n        var storedLevel = this._loadLevel();\r\n        if (storedLevel) {\r\n            this._level = storedLevel;\r\n        }\r\n        else {\r\n            this._storeLevel(this.level);\r\n        }\r\n        return this;\r\n    };\r\n    Logger.prototype.unstore = function () {\r\n        this._store = false;\r\n        localStorage.removeItem(this._storeAs);\r\n        return this;\r\n    };\r\n    Object.defineProperty(Logger.prototype, \"level\", {\r\n        get: function () { return this._level; },\r\n        set: function (level) {\r\n            this._store && this._storeLevel(level);\r\n            this._level = level;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Logger = __decorate([\r\n        core_1.Injectable(),\r\n        __param(0, core_1.Optional()), \r\n        __metadata('design:paramtypes', [Options])\r\n    ], Logger);\r\n    return Logger;\r\n}());\r\nexports.Logger = Logger;\r\n//# sourceMappingURL=logger.js.map","/home/travis/build/npmtest/node-npmtest-angular2-logger/node_modules/angular2-logger/bundles/angular2-logger.sys.js":"var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n};\r\nSystem.register(\"angular2-logger/app/core/level\", [], function(exports_1, context_1) {\r\n    \"use strict\";\r\n    var __moduleName = context_1 && context_1.id;\r\n    var Level;\r\n    return {\r\n        setters:[],\r\n        execute: function() {\r\n            (function (Level) {\r\n                Level[Level[\"OFF\"] = 0] = \"OFF\";\r\n                Level[Level[\"ERROR\"] = 1] = \"ERROR\";\r\n                Level[Level[\"WARN\"] = 2] = \"WARN\";\r\n                Level[Level[\"INFO\"] = 3] = \"INFO\";\r\n                Level[Level[\"DEBUG\"] = 4] = \"DEBUG\";\r\n                Level[Level[\"LOG\"] = 5] = \"LOG\";\r\n            })(Level || (Level = {}));\r\n            exports_1(\"Level\", Level);\r\n        }\r\n    }\r\n});\r\nSystem.register(\"angular2-logger/app/core/logger\", [\"@angular/core\", \"angular2-logger/app/core/level\"], function(exports_2, context_2) {\r\n    \"use strict\";\r\n    var __moduleName = context_2 && context_2.id;\r\n    var core_1, level_1;\r\n    var Options, CONSOLE_DEBUG_METHOD, DEFAULT_OPTIONS, Logger;\r\n    return {\r\n        setters:[\r\n            function (core_1_1) {\r\n                core_1 = core_1_1;\r\n            },\r\n            function (level_1_1) {\r\n                level_1 = level_1_1;\r\n            }],\r\n        execute: function() {\r\n            Options = (function () {\r\n                function Options() {\r\n                }\r\n                return Options;\r\n            }());\r\n            exports_2(\"Options\", Options);\r\n            CONSOLE_DEBUG_METHOD = console[\"debug\"] ? \"debug\" : \"log\";\r\n            DEFAULT_OPTIONS = {\r\n                level: level_1.Level.WARN,\r\n                global: true,\r\n                globalAs: \"logger\",\r\n                store: false,\r\n                storeAs: \"angular2.logger.level\"\r\n            };\r\n            Logger = (function () {\r\n                function Logger(options) {\r\n                    var _this = this;\r\n                    this.Level = level_1.Level;\r\n                    this._loadLevel = function () { return Number(localStorage.getItem(_this._storeAs)); };\r\n                    this.global = function () { return window[_this._globalAs] = _this; };\r\n                    this.isErrorEnabled = function () { return _this.level >= level_1.Level.ERROR; };\r\n                    this.isWarnEnabled = function () { return _this.level >= level_1.Level.WARN; };\r\n                    this.isInfoEnabled = function () { return _this.level >= level_1.Level.INFO; };\r\n                    this.isDebugEnabled = function () { return _this.level >= level_1.Level.DEBUG; };\r\n                    this.isLogEnabled = function () { return _this.level >= level_1.Level.LOG; };\r\n                    var _a = Object.assign({}, DEFAULT_OPTIONS, options), level = _a.level, global = _a.global, globalAs = _a.globalAs, store = _a.store, storeAs = _a.storeAs;\r\n                    this._level = level;\r\n                    this._globalAs = globalAs;\r\n                    this._storeAs = storeAs;\r\n                    global && this.global();\r\n                    if (store || this._loadLevel())\r\n                        this.store();\r\n                }\r\n                Logger.prototype._storeLevel = function (level) { localStorage[this._storeAs] = level; };\r\n                Logger.prototype.error = function (message) {\r\n                    var optionalParams = [];\r\n                    for (var _i = 1; _i < arguments.length; _i++) {\r\n                        optionalParams[_i - 1] = arguments[_i];\r\n                    }\r\n                    this.isErrorEnabled() && console.error.apply(console, arguments);\r\n                };\r\n                Logger.prototype.warn = function (message) {\r\n                    var optionalParams = [];\r\n                    for (var _i = 1; _i < arguments.length; _i++) {\r\n                        optionalParams[_i - 1] = arguments[_i];\r\n                    }\r\n                    this.isWarnEnabled() && console.warn.apply(console, arguments);\r\n                };\r\n                Logger.prototype.info = function (message) {\r\n                    var optionalParams = [];\r\n                    for (var _i = 1; _i < arguments.length; _i++) {\r\n                        optionalParams[_i - 1] = arguments[_i];\r\n                    }\r\n                    this.isInfoEnabled() && console.info.apply(console, arguments);\r\n                };\r\n                Logger.prototype.debug = function (message) {\r\n                    var optionalParams = [];\r\n                    for (var _i = 1; _i < arguments.length; _i++) {\r\n                        optionalParams[_i - 1] = arguments[_i];\r\n                    }\r\n                    this.isDebugEnabled() && console[CONSOLE_DEBUG_METHOD].apply(console, arguments);\r\n                };\r\n                Logger.prototype.log = function (message) {\r\n                    var optionalParams = [];\r\n                    for (var _i = 1; _i < arguments.length; _i++) {\r\n                        optionalParams[_i - 1] = arguments[_i];\r\n                    }\r\n                    this.isLogEnabled() && console.log.apply(console, arguments);\r\n                };\r\n                Logger.prototype.store = function () {\r\n                    this._store = true;\r\n                    var storedLevel = this._loadLevel();\r\n                    if (storedLevel) {\r\n                        this._level = storedLevel;\r\n                    }\r\n                    else {\r\n                        this._storeLevel(this.level);\r\n                    }\r\n                    return this;\r\n                };\r\n                Logger.prototype.unstore = function () {\r\n                    this._store = false;\r\n                    localStorage.removeItem(this._storeAs);\r\n                    return this;\r\n                };\r\n                Object.defineProperty(Logger.prototype, \"level\", {\r\n                    get: function () { return this._level; },\r\n                    set: function (level) {\r\n                        this._store && this._storeLevel(level);\r\n                        this._level = level;\r\n                    },\r\n                    enumerable: true,\r\n                    configurable: true\r\n                });\r\n                Logger = __decorate([\r\n                    core_1.Injectable(),\r\n                    __param(0, core_1.Optional()), \r\n                    __metadata('design:paramtypes', [Options])\r\n                ], Logger);\r\n                return Logger;\r\n            }());\r\n            exports_2(\"Logger\", Logger);\r\n        }\r\n    }\r\n});\r\nSystem.register(\"angular2-logger/app/core/providers\", [\"angular2-logger/app/core/logger\", \"angular2-logger/app/core/level\"], function(exports_3, context_3) {\r\n    \"use strict\";\r\n    var __moduleName = context_3 && context_3.id;\r\n    var logger_1, level_2;\r\n    var OFF_LOGGER_PROVIDERS, ERROR_LOGGER_PROVIDERS, WARN_LOGGER_PROVIDERS, INFO_LOGGER_PROVIDERS, DEBUG_LOGGER_PROVIDERS, LOG_LOGGER_PROVIDERS;\r\n    return {\r\n        setters:[\r\n            function (logger_1_1) {\r\n                logger_1 = logger_1_1;\r\n            },\r\n            function (level_2_1) {\r\n                level_2 = level_2_1;\r\n            }],\r\n        execute: function() {\r\n            exports_3(\"OFF_LOGGER_PROVIDERS\", OFF_LOGGER_PROVIDERS = [{ provide: logger_1.Options, useValue: { level: level_2.Level.OFF } }, logger_1.Logger]);\r\n            exports_3(\"ERROR_LOGGER_PROVIDERS\", ERROR_LOGGER_PROVIDERS = [{ provide: logger_1.Options, useValue: { level: level_2.Level.ERROR } }, logger_1.Logger]);\r\n            exports_3(\"WARN_LOGGER_PROVIDERS\", WARN_LOGGER_PROVIDERS = [{ provide: logger_1.Options, useValue: { level: level_2.Level.WARN } }, logger_1.Logger]);\r\n            exports_3(\"INFO_LOGGER_PROVIDERS\", INFO_LOGGER_PROVIDERS = [{ provide: logger_1.Options, useValue: { level: level_2.Level.INFO } }, logger_1.Logger]);\r\n            exports_3(\"DEBUG_LOGGER_PROVIDERS\", DEBUG_LOGGER_PROVIDERS = [{ provide: logger_1.Options, useValue: { level: level_2.Level.DEBUG } }, logger_1.Logger]);\r\n            exports_3(\"LOG_LOGGER_PROVIDERS\", LOG_LOGGER_PROVIDERS = [{ provide: logger_1.Options, useValue: { level: level_2.Level.LOG } }, logger_1.Logger]);\r\n        }\r\n    }\r\n});\r\nSystem.register(\"angular2-logger/core\", [\"angular2-logger/app/core/level\", \"angular2-logger/app/core/logger\", \"angular2-logger/app/core/providers\"], function(exports_4, context_4) {\r\n    \"use strict\";\r\n    var __moduleName = context_4 && context_4.id;\r\n    function exportStar_1(m) {\r\n        var exports = {};\r\n        for(var n in m) {\r\n            if (n !== \"default\") exports[n] = m[n];\r\n        }\r\n        exports_4(exports);\r\n    }\r\n    return {\r\n        setters:[\r\n            function (level_3_1) {\r\n                exportStar_1(level_3_1);\r\n            },\r\n            function (logger_2_1) {\r\n                exportStar_1(logger_2_1);\r\n            },\r\n            function (providers_1_1) {\r\n                exportStar_1(providers_1_1);\r\n            }],\r\n        execute: function() {\r\n        }\r\n    }\r\n});\r\n//# sourceMappingURL=angular2-logger.sys.js.map"}